// Code generated by 'yaegi extract github.com/eolinker/eosc/eocontext/http-context'. DO NOT EDIT.

package script_handler

import (
	"context"
	"mime/multipart"
	"net"
	"net/http"
	"net/url"
	"reflect"
	"time"

	http_context "github.com/eolinker/eosc/eocontext/http-context"

	"github.com/eolinker/eosc"
	"github.com/eolinker/eosc/eocontext"
	"github.com/traefik/yaegi/stdlib"
)

func init() {
	stdlib.Symbols["github.com/eolinker/eosc/eocontext/http-context/http_context"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Assert":          reflect.ValueOf(http_context.Assert),
		"DoHttpFilter":    reflect.ValueOf(http_context.DoHttpFilter),
		"FilterSkillName": reflect.ValueOf(&http_context.FilterSkillName).Elem(),
		"KeyCloneCtx":     reflect.ValueOf(&http_context.KeyCloneCtx).Elem(),
		"KeyHttpRetry":    reflect.ValueOf(&http_context.KeyHttpRetry).Elem(),
		"KeyHttpTimeout":  reflect.ValueOf(&http_context.KeyHttpTimeout).Elem(),
		"WebsocketAssert": reflect.ValueOf(http_context.WebsocketAssert),

		// type definitions
		"FileHeader":        reflect.ValueOf((*http_context.FileHeader)(nil)),
		"HttpFilter":        reflect.ValueOf((*http_context.HttpFilter)(nil)),
		"IBodyDataReader":   reflect.ValueOf((*http_context.IBodyDataReader)(nil)),
		"IBodyDataWriter":   reflect.ValueOf((*http_context.IBodyDataWriter)(nil)),
		"IBodyGet":          reflect.ValueOf((*http_context.IBodyGet)(nil)),
		"IBodySet":          reflect.ValueOf((*http_context.IBodySet)(nil)),
		"IHeaderReader":     reflect.ValueOf((*http_context.IHeaderReader)(nil)),
		"IHeaderWriter":     reflect.ValueOf((*http_context.IHeaderWriter)(nil)),
		"IHttpContext":      reflect.ValueOf((*http_context.IHttpContext)(nil)),
		"IProxy":            reflect.ValueOf((*http_context.IProxy)(nil)),
		"IQueryReader":      reflect.ValueOf((*http_context.IQueryReader)(nil)),
		"IQueryWriter":      reflect.ValueOf((*http_context.IQueryWriter)(nil)),
		"IRequest":          reflect.ValueOf((*http_context.IRequest)(nil)),
		"IRequestReader":    reflect.ValueOf((*http_context.IRequestReader)(nil)),
		"IResponse":         reflect.ValueOf((*http_context.IResponse)(nil)),
		"IResponseHeader":   reflect.ValueOf((*http_context.IResponseHeader)(nil)),
		"IStatusGet":        reflect.ValueOf((*http_context.IStatusGet)(nil)),
		"IStatusSet":        reflect.ValueOf((*http_context.IStatusSet)(nil)),
		"IURIReader":        reflect.ValueOf((*http_context.IURIReader)(nil)),
		"IURIWriter":        reflect.ValueOf((*http_context.IURIWriter)(nil)),
		"IWebsocketContext": reflect.ValueOf((*http_context.IWebsocketContext)(nil)),
		"WebsocketFilter":   reflect.ValueOf((*http_context.WebsocketFilter)(nil)),

		// interface wrapper definitions
		"_HttpFilter":        reflect.ValueOf((*_github_com_eolinker_eosc_eocontext_http_context_HttpFilter)(nil)),
		"_IBodyDataReader":   reflect.ValueOf((*_github_com_eolinker_eosc_eocontext_http_context_IBodyDataReader)(nil)),
		"_IBodyDataWriter":   reflect.ValueOf((*_github_com_eolinker_eosc_eocontext_http_context_IBodyDataWriter)(nil)),
		"_IBodyGet":          reflect.ValueOf((*_github_com_eolinker_eosc_eocontext_http_context_IBodyGet)(nil)),
		"_IBodySet":          reflect.ValueOf((*_github_com_eolinker_eosc_eocontext_http_context_IBodySet)(nil)),
		"_IHeaderReader":     reflect.ValueOf((*_github_com_eolinker_eosc_eocontext_http_context_IHeaderReader)(nil)),
		"_IHeaderWriter":     reflect.ValueOf((*_github_com_eolinker_eosc_eocontext_http_context_IHeaderWriter)(nil)),
		"_IHttpContext":      reflect.ValueOf((*_github_com_eolinker_eosc_eocontext_http_context_IHttpContext)(nil)),
		"_IProxy":            reflect.ValueOf((*_github_com_eolinker_eosc_eocontext_http_context_IProxy)(nil)),
		"_IQueryReader":      reflect.ValueOf((*_github_com_eolinker_eosc_eocontext_http_context_IQueryReader)(nil)),
		"_IQueryWriter":      reflect.ValueOf((*_github_com_eolinker_eosc_eocontext_http_context_IQueryWriter)(nil)),
		"_IRequest":          reflect.ValueOf((*_github_com_eolinker_eosc_eocontext_http_context_IRequest)(nil)),
		"_IRequestReader":    reflect.ValueOf((*_github_com_eolinker_eosc_eocontext_http_context_IRequestReader)(nil)),
		"_IResponse":         reflect.ValueOf((*_github_com_eolinker_eosc_eocontext_http_context_IResponse)(nil)),
		"_IResponseHeader":   reflect.ValueOf((*_github_com_eolinker_eosc_eocontext_http_context_IResponseHeader)(nil)),
		"_IStatusGet":        reflect.ValueOf((*_github_com_eolinker_eosc_eocontext_http_context_IStatusGet)(nil)),
		"_IStatusSet":        reflect.ValueOf((*_github_com_eolinker_eosc_eocontext_http_context_IStatusSet)(nil)),
		"_IURIReader":        reflect.ValueOf((*_github_com_eolinker_eosc_eocontext_http_context_IURIReader)(nil)),
		"_IURIWriter":        reflect.ValueOf((*_github_com_eolinker_eosc_eocontext_http_context_IURIWriter)(nil)),
		"_IWebsocketContext": reflect.ValueOf((*_github_com_eolinker_eosc_eocontext_http_context_IWebsocketContext)(nil)),
		"_WebsocketFilter":   reflect.ValueOf((*_github_com_eolinker_eosc_eocontext_http_context_WebsocketFilter)(nil)),
	}
}

// _github_com_eolinker_eosc_eocontext_http_context_HttpFilter is an interface wrapper for HttpFilter type
type _github_com_eolinker_eosc_eocontext_http_context_HttpFilter struct {
	IValue        interface{}
	WDoHttpFilter func(ctx http_context.IHttpContext, next eocontext.IChain) (err error)
}

func (W _github_com_eolinker_eosc_eocontext_http_context_HttpFilter) DoHttpFilter(ctx http_context.IHttpContext, next eocontext.IChain) (err error) {
	return W.WDoHttpFilter(ctx, next)
}

// _github_com_eolinker_eosc_eocontext_http_context_IBodyDataReader is an interface wrapper for IBodyDataReader type
type _github_com_eolinker_eosc_eocontext_http_context_IBodyDataReader struct {
	IValue       interface{}
	WBodyForm    func() (url.Values, error)
	WContentType func() string
	WFiles       func() (map[string][]*multipart.FileHeader, error)
	WGetFile     func(key string) (file []*multipart.FileHeader, has bool)
	WGetForm     func(key string) string
	WRawBody     func() ([]byte, error)
}

func (W _github_com_eolinker_eosc_eocontext_http_context_IBodyDataReader) BodyForm() (url.Values, error) {
	return W.WBodyForm()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IBodyDataReader) ContentType() string {
	return W.WContentType()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IBodyDataReader) Files() (map[string][]*multipart.FileHeader, error) {
	return W.WFiles()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IBodyDataReader) GetFile(key string) (file []*multipart.FileHeader, has bool) {
	return W.WGetFile(key)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IBodyDataReader) GetForm(key string) string {
	return W.WGetForm(key)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IBodyDataReader) RawBody() ([]byte, error) {
	return W.WRawBody()
}

// _github_com_eolinker_eosc_eocontext_http_context_IBodyDataWriter is an interface wrapper for IBodyDataWriter type
type _github_com_eolinker_eosc_eocontext_http_context_IBodyDataWriter struct {
	IValue       interface{}
	WAddFile     func(key string, file *multipart.FileHeader) error
	WAddForm     func(key string, value string) error
	WBodyForm    func() (url.Values, error)
	WContentType func() string
	WFiles       func() (map[string][]*multipart.FileHeader, error)
	WGetFile     func(key string) (file []*multipart.FileHeader, has bool)
	WGetForm     func(key string) string
	WRawBody     func() ([]byte, error)
	WSetForm     func(values url.Values) error
	WSetRaw      func(contentType string, body []byte)
	WSetToForm   func(key string, value string) error
}

func (W _github_com_eolinker_eosc_eocontext_http_context_IBodyDataWriter) AddFile(key string, file *multipart.FileHeader) error {
	return W.WAddFile(key, file)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IBodyDataWriter) AddForm(key string, value string) error {
	return W.WAddForm(key, value)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IBodyDataWriter) BodyForm() (url.Values, error) {
	return W.WBodyForm()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IBodyDataWriter) ContentType() string {
	return W.WContentType()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IBodyDataWriter) Files() (map[string][]*multipart.FileHeader, error) {
	return W.WFiles()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IBodyDataWriter) GetFile(key string) (file []*multipart.FileHeader, has bool) {
	return W.WGetFile(key)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IBodyDataWriter) GetForm(key string) string {
	return W.WGetForm(key)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IBodyDataWriter) RawBody() ([]byte, error) {
	return W.WRawBody()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IBodyDataWriter) SetForm(values url.Values) error {
	return W.WSetForm(values)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IBodyDataWriter) SetRaw(contentType string, body []byte) {
	W.WSetRaw(contentType, body)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IBodyDataWriter) SetToForm(key string, value string) error {
	return W.WSetToForm(key, value)
}

// _github_com_eolinker_eosc_eocontext_http_context_IBodyGet is an interface wrapper for IBodyGet type
type _github_com_eolinker_eosc_eocontext_http_context_IBodyGet struct {
	IValue   interface{}
	WBodyLen func() int
	WGetBody func() []byte
}

func (W _github_com_eolinker_eosc_eocontext_http_context_IBodyGet) BodyLen() int {
	return W.WBodyLen()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IBodyGet) GetBody() []byte {
	return W.WGetBody()
}

// _github_com_eolinker_eosc_eocontext_http_context_IBodySet is an interface wrapper for IBodySet type
type _github_com_eolinker_eosc_eocontext_http_context_IBodySet struct {
	IValue   interface{}
	WSetBody func(a0 []byte)
}

func (W _github_com_eolinker_eosc_eocontext_http_context_IBodySet) SetBody(a0 []byte) {
	W.WSetBody(a0)
}

// _github_com_eolinker_eosc_eocontext_http_context_IHeaderReader is an interface wrapper for IHeaderReader type
type _github_com_eolinker_eosc_eocontext_http_context_IHeaderReader struct {
	IValue     interface{}
	WGetCookie func(key string) string
	WGetHeader func(name string) string
	WHeaders   func() http.Header
	WHost      func() string
	WRawHeader func() string
}

func (W _github_com_eolinker_eosc_eocontext_http_context_IHeaderReader) GetCookie(key string) string {
	return W.WGetCookie(key)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IHeaderReader) GetHeader(name string) string {
	return W.WGetHeader(name)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IHeaderReader) Headers() http.Header {
	return W.WHeaders()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IHeaderReader) Host() string {
	return W.WHost()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IHeaderReader) RawHeader() string {
	return W.WRawHeader()
}

// _github_com_eolinker_eosc_eocontext_http_context_IHeaderWriter is an interface wrapper for IHeaderWriter type
type _github_com_eolinker_eosc_eocontext_http_context_IHeaderWriter struct {
	IValue     interface{}
	WAddHeader func(key string, value string)
	WDelHeader func(key string)
	WGetCookie func(key string) string
	WGetHeader func(name string) string
	WHeaders   func() http.Header
	WHost      func() string
	WRawHeader func() string
	WSetHeader func(key string, value string)
	WSetHost   func(host string)
}

func (W _github_com_eolinker_eosc_eocontext_http_context_IHeaderWriter) AddHeader(key string, value string) {
	W.WAddHeader(key, value)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IHeaderWriter) DelHeader(key string) {
	W.WDelHeader(key)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IHeaderWriter) GetCookie(key string) string {
	return W.WGetCookie(key)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IHeaderWriter) GetHeader(name string) string {
	return W.WGetHeader(name)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IHeaderWriter) Headers() http.Header {
	return W.WHeaders()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IHeaderWriter) Host() string {
	return W.WHost()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IHeaderWriter) RawHeader() string {
	return W.WRawHeader()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IHeaderWriter) SetHeader(key string, value string) {
	W.WSetHeader(key, value)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IHeaderWriter) SetHost(host string) {
	W.WSetHost(host)
}

// _github_com_eolinker_eosc_eocontext_http_context_IHttpContext is an interface wrapper for IHttpContext type
type _github_com_eolinker_eosc_eocontext_http_context_IHttpContext struct {
	IValue                  interface{}
	WAcceptTime             func() time.Time
	WAssert                 func(i interface{}) error
	WClone                  func() (eocontext.EoContext, error)
	WContext                func() context.Context
	WFastFinish             func()
	WGetBalance             func() eocontext.BalanceHandler
	WGetComplete            func() eocontext.CompleteHandler
	WGetEntry               func() eosc.IEntry
	WGetFinish              func() eocontext.FinishHandler
	WGetLabel               func(name string) string
	WGetUpstreamHostHandler func() eocontext.UpstreamHostHandler
	WIsCloneable            func() bool
	WLabels                 func() map[string]string
	WLocalAddr              func() net.Addr
	WLocalIP                func() net.IP
	WLocalPort              func() int
	WProxies                func() []http_context.IProxy
	WProxy                  func() http_context.IRequest
	WRealIP                 func() string
	WRequest                func() http_context.IRequestReader
	WRequestId              func() string
	WResponse               func() http_context.IResponse
	WScheme                 func() string
	WSendTo                 func(scheme string, node eocontext.INode, timeout time.Duration) error
	WSetBalance             func(handler eocontext.BalanceHandler)
	WSetCompleteHandler     func(handler eocontext.CompleteHandler)
	WSetFinish              func(handler eocontext.FinishHandler)
	WSetLabel               func(name string, value string)
	WSetUpstreamHostHandler func(handler eocontext.UpstreamHostHandler)
	WValue                  func(key interface{}) interface{}
	WWithValue              func(key interface{}, val interface{})
}

func (W _github_com_eolinker_eosc_eocontext_http_context_IHttpContext) AcceptTime() time.Time {
	return W.WAcceptTime()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IHttpContext) Assert(i interface{}) error {
	return W.WAssert(i)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IHttpContext) Clone() (eocontext.EoContext, error) {
	return W.WClone()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IHttpContext) Context() context.Context {
	return W.WContext()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IHttpContext) FastFinish() {
	W.WFastFinish()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IHttpContext) GetBalance() eocontext.BalanceHandler {
	return W.WGetBalance()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IHttpContext) GetComplete() eocontext.CompleteHandler {
	return W.WGetComplete()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IHttpContext) GetEntry() eosc.IEntry {
	return W.WGetEntry()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IHttpContext) GetFinish() eocontext.FinishHandler {
	return W.WGetFinish()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IHttpContext) GetLabel(name string) string {
	return W.WGetLabel(name)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IHttpContext) GetUpstreamHostHandler() eocontext.UpstreamHostHandler {
	return W.WGetUpstreamHostHandler()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IHttpContext) IsCloneable() bool {
	return W.WIsCloneable()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IHttpContext) Labels() map[string]string {
	return W.WLabels()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IHttpContext) LocalAddr() net.Addr {
	return W.WLocalAddr()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IHttpContext) LocalIP() net.IP {
	return W.WLocalIP()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IHttpContext) LocalPort() int {
	return W.WLocalPort()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IHttpContext) Proxies() []http_context.IProxy {
	return W.WProxies()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IHttpContext) Proxy() http_context.IRequest {
	return W.WProxy()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IHttpContext) RealIP() string {
	return W.WRealIP()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IHttpContext) Request() http_context.IRequestReader {
	return W.WRequest()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IHttpContext) RequestId() string {
	return W.WRequestId()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IHttpContext) Response() http_context.IResponse {
	return W.WResponse()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IHttpContext) Scheme() string {
	return W.WScheme()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IHttpContext) SendTo(scheme string, node eocontext.INode, timeout time.Duration) error {
	return W.WSendTo(scheme, node, timeout)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IHttpContext) SetBalance(handler eocontext.BalanceHandler) {
	W.WSetBalance(handler)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IHttpContext) SetCompleteHandler(handler eocontext.CompleteHandler) {
	W.WSetCompleteHandler(handler)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IHttpContext) SetFinish(handler eocontext.FinishHandler) {
	W.WSetFinish(handler)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IHttpContext) SetLabel(name string, value string) {
	W.WSetLabel(name, value)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IHttpContext) SetUpstreamHostHandler(handler eocontext.UpstreamHostHandler) {
	W.WSetUpstreamHostHandler(handler)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IHttpContext) Value(key interface{}) interface{} {
	return W.WValue(key)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IHttpContext) WithValue(key interface{}, val interface{}) {
	W.WWithValue(key, val)
}

// _github_com_eolinker_eosc_eocontext_http_context_IProxy is an interface wrapper for IProxy type
type _github_com_eolinker_eosc_eocontext_http_context_IProxy struct {
	IValue           interface{}
	WBody            func() http_context.IBodyDataWriter
	WContentLength   func() int
	WContentType     func() string
	WHeader          func() http_context.IHeaderWriter
	WMethod          func() string
	WProxyTime       func() time.Time
	WRemoteIP        func() string
	WRemotePort      func() int
	WResponseBody    func() string
	WResponseHeaders func() http.Header
	WResponseLength  func() int
	WResponseTime    func() int64
	WSetMethod       func(method string)
	WStatus          func() string
	WStatusCode      func() int
	WURI             func() http_context.IURIWriter
}

func (W _github_com_eolinker_eosc_eocontext_http_context_IProxy) Body() http_context.IBodyDataWriter {
	return W.WBody()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IProxy) ContentLength() int {
	return W.WContentLength()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IProxy) ContentType() string {
	return W.WContentType()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IProxy) Header() http_context.IHeaderWriter {
	return W.WHeader()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IProxy) Method() string {
	return W.WMethod()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IProxy) ProxyTime() time.Time {
	return W.WProxyTime()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IProxy) RemoteIP() string {
	return W.WRemoteIP()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IProxy) RemotePort() int {
	return W.WRemotePort()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IProxy) ResponseBody() string {
	return W.WResponseBody()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IProxy) ResponseHeaders() http.Header {
	return W.WResponseHeaders()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IProxy) ResponseLength() int {
	return W.WResponseLength()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IProxy) ResponseTime() int64 {
	return W.WResponseTime()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IProxy) SetMethod(method string) {
	W.WSetMethod(method)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IProxy) Status() string {
	return W.WStatus()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IProxy) StatusCode() int {
	return W.WStatusCode()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IProxy) URI() http_context.IURIWriter {
	return W.WURI()
}

// _github_com_eolinker_eosc_eocontext_http_context_IQueryReader is an interface wrapper for IQueryReader type
type _github_com_eolinker_eosc_eocontext_http_context_IQueryReader struct {
	IValue    interface{}
	WGetQuery func(key string) string
	WRawQuery func() string
}

func (W _github_com_eolinker_eosc_eocontext_http_context_IQueryReader) GetQuery(key string) string {
	return W.WGetQuery(key)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IQueryReader) RawQuery() string {
	return W.WRawQuery()
}

// _github_com_eolinker_eosc_eocontext_http_context_IQueryWriter is an interface wrapper for IQueryWriter type
type _github_com_eolinker_eosc_eocontext_http_context_IQueryWriter struct {
	IValue       interface{}
	WAddQuery    func(key string, value string)
	WDelQuery    func(key string)
	WGetQuery    func(key string) string
	WRawQuery    func() string
	WSetQuery    func(key string, value string)
	WSetRawQuery func(raw string)
}

func (W _github_com_eolinker_eosc_eocontext_http_context_IQueryWriter) AddQuery(key string, value string) {
	W.WAddQuery(key, value)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IQueryWriter) DelQuery(key string) {
	W.WDelQuery(key)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IQueryWriter) GetQuery(key string) string {
	return W.WGetQuery(key)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IQueryWriter) RawQuery() string {
	return W.WRawQuery()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IQueryWriter) SetQuery(key string, value string) {
	W.WSetQuery(key, value)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IQueryWriter) SetRawQuery(raw string) {
	W.WSetRawQuery(raw)
}

// _github_com_eolinker_eosc_eocontext_http_context_IRequest is an interface wrapper for IRequest type
type _github_com_eolinker_eosc_eocontext_http_context_IRequest struct {
	IValue         interface{}
	WBody          func() http_context.IBodyDataWriter
	WContentLength func() int
	WContentType   func() string
	WHeader        func() http_context.IHeaderWriter
	WMethod        func() string
	WSetMethod     func(method string)
	WURI           func() http_context.IURIWriter
}

func (W _github_com_eolinker_eosc_eocontext_http_context_IRequest) Body() http_context.IBodyDataWriter {
	return W.WBody()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IRequest) ContentLength() int {
	return W.WContentLength()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IRequest) ContentType() string {
	return W.WContentType()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IRequest) Header() http_context.IHeaderWriter {
	return W.WHeader()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IRequest) Method() string {
	return W.WMethod()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IRequest) SetMethod(method string) {
	W.WSetMethod(method)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IRequest) URI() http_context.IURIWriter {
	return W.WURI()
}

// _github_com_eolinker_eosc_eocontext_http_context_IRequestReader is an interface wrapper for IRequestReader type
type _github_com_eolinker_eosc_eocontext_http_context_IRequestReader struct {
	IValue         interface{}
	WBody          func() http_context.IBodyDataReader
	WContentLength func() int
	WContentType   func() string
	WForwardIP     func() string
	WHeader        func() http_context.IHeaderReader
	WMethod        func() string
	WRealIp        func() string
	WRemoteAddr    func() string
	WRemotePort    func() string
	WString        func() string
	WURI           func() http_context.IURIReader
}

func (W _github_com_eolinker_eosc_eocontext_http_context_IRequestReader) Body() http_context.IBodyDataReader {
	return W.WBody()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IRequestReader) ContentLength() int {
	return W.WContentLength()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IRequestReader) ContentType() string {
	return W.WContentType()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IRequestReader) ForwardIP() string {
	return W.WForwardIP()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IRequestReader) Header() http_context.IHeaderReader {
	return W.WHeader()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IRequestReader) Method() string {
	return W.WMethod()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IRequestReader) RealIp() string {
	return W.WRealIp()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IRequestReader) RemoteAddr() string {
	return W.WRemoteAddr()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IRequestReader) RemotePort() string {
	return W.WRemotePort()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IRequestReader) String() string {
	if W.WString == nil {
		return ""
	}
	return W.WString()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IRequestReader) URI() http_context.IURIReader {
	return W.WURI()
}

// _github_com_eolinker_eosc_eocontext_http_context_IResponse is an interface wrapper for IResponse type
type _github_com_eolinker_eosc_eocontext_http_context_IResponse struct {
	IValue           interface{}
	WAddHeader       func(key string, value string)
	WBodyLen         func() int
	WClearError      func()
	WContentLength   func() int
	WContentType     func() string
	WDelHeader       func(key string)
	WGetBody         func() []byte
	WGetHeader       func(name string) string
	WHeaders         func() http.Header
	WHeadersString   func() string
	WProxyStatus     func() string
	WProxyStatusCode func() int
	WRemoteIP        func() string
	WRemotePort      func() int
	WResponseError   func() error
	WResponseTime    func() time.Duration
	WSetBody         func(a0 []byte)
	WSetHeader       func(key string, value string)
	WSetProxyStatus  func(code int, status string)
	WSetResponseTime func(duration time.Duration)
	WSetStatus       func(code int, status string)
	WStatus          func() string
	WStatusCode      func() int
	WString          func() string
}

func (W _github_com_eolinker_eosc_eocontext_http_context_IResponse) AddHeader(key string, value string) {
	W.WAddHeader(key, value)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IResponse) BodyLen() int {
	return W.WBodyLen()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IResponse) ClearError() {
	W.WClearError()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IResponse) ContentLength() int {
	return W.WContentLength()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IResponse) ContentType() string {
	return W.WContentType()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IResponse) DelHeader(key string) {
	W.WDelHeader(key)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IResponse) GetBody() []byte {
	return W.WGetBody()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IResponse) GetHeader(name string) string {
	return W.WGetHeader(name)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IResponse) Headers() http.Header {
	return W.WHeaders()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IResponse) HeadersString() string {
	return W.WHeadersString()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IResponse) ProxyStatus() string {
	return W.WProxyStatus()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IResponse) ProxyStatusCode() int {
	return W.WProxyStatusCode()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IResponse) RemoteIP() string {
	return W.WRemoteIP()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IResponse) RemotePort() int {
	return W.WRemotePort()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IResponse) ResponseError() error {
	return W.WResponseError()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IResponse) ResponseTime() time.Duration {
	return W.WResponseTime()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IResponse) SetBody(a0 []byte) {
	W.WSetBody(a0)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IResponse) SetHeader(key string, value string) {
	W.WSetHeader(key, value)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IResponse) SetProxyStatus(code int, status string) {
	W.WSetProxyStatus(code, status)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IResponse) SetResponseTime(duration time.Duration) {
	W.WSetResponseTime(duration)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IResponse) SetStatus(code int, status string) {
	W.WSetStatus(code, status)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IResponse) Status() string {
	return W.WStatus()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IResponse) StatusCode() int {
	return W.WStatusCode()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IResponse) String() string {
	if W.WString == nil {
		return ""
	}
	return W.WString()
}

// _github_com_eolinker_eosc_eocontext_http_context_IResponseHeader is an interface wrapper for IResponseHeader type
type _github_com_eolinker_eosc_eocontext_http_context_IResponseHeader struct {
	IValue         interface{}
	WAddHeader     func(key string, value string)
	WDelHeader     func(key string)
	WGetHeader     func(name string) string
	WHeaders       func() http.Header
	WHeadersString func() string
	WSetHeader     func(key string, value string)
}

func (W _github_com_eolinker_eosc_eocontext_http_context_IResponseHeader) AddHeader(key string, value string) {
	W.WAddHeader(key, value)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IResponseHeader) DelHeader(key string) {
	W.WDelHeader(key)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IResponseHeader) GetHeader(name string) string {
	return W.WGetHeader(name)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IResponseHeader) Headers() http.Header {
	return W.WHeaders()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IResponseHeader) HeadersString() string {
	return W.WHeadersString()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IResponseHeader) SetHeader(key string, value string) {
	W.WSetHeader(key, value)
}

// _github_com_eolinker_eosc_eocontext_http_context_IStatusGet is an interface wrapper for IStatusGet type
type _github_com_eolinker_eosc_eocontext_http_context_IStatusGet struct {
	IValue           interface{}
	WProxyStatus     func() string
	WProxyStatusCode func() int
	WStatus          func() string
	WStatusCode      func() int
}

func (W _github_com_eolinker_eosc_eocontext_http_context_IStatusGet) ProxyStatus() string {
	return W.WProxyStatus()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IStatusGet) ProxyStatusCode() int {
	return W.WProxyStatusCode()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IStatusGet) Status() string {
	return W.WStatus()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IStatusGet) StatusCode() int {
	return W.WStatusCode()
}

// _github_com_eolinker_eosc_eocontext_http_context_IStatusSet is an interface wrapper for IStatusSet type
type _github_com_eolinker_eosc_eocontext_http_context_IStatusSet struct {
	IValue          interface{}
	WSetProxyStatus func(code int, status string)
	WSetStatus      func(code int, status string)
}

func (W _github_com_eolinker_eosc_eocontext_http_context_IStatusSet) SetProxyStatus(code int, status string) {
	W.WSetProxyStatus(code, status)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IStatusSet) SetStatus(code int, status string) {
	W.WSetStatus(code, status)
}

// _github_com_eolinker_eosc_eocontext_http_context_IURIReader is an interface wrapper for IURIReader type
type _github_com_eolinker_eosc_eocontext_http_context_IURIReader struct {
	IValue      interface{}
	WGetQuery   func(key string) string
	WHost       func() string
	WPath       func() string
	WRawQuery   func() string
	WRawURL     func() string
	WRequestURI func() string
	WScheme     func() string
}

func (W _github_com_eolinker_eosc_eocontext_http_context_IURIReader) GetQuery(key string) string {
	return W.WGetQuery(key)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IURIReader) Host() string {
	return W.WHost()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IURIReader) Path() string {
	return W.WPath()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IURIReader) RawQuery() string {
	return W.WRawQuery()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IURIReader) RawURL() string {
	return W.WRawURL()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IURIReader) RequestURI() string {
	return W.WRequestURI()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IURIReader) Scheme() string {
	return W.WScheme()
}

// _github_com_eolinker_eosc_eocontext_http_context_IURIWriter is an interface wrapper for IURIWriter type
type _github_com_eolinker_eosc_eocontext_http_context_IURIWriter struct {
	IValue       interface{}
	WAddQuery    func(key string, value string)
	WDelQuery    func(key string)
	WGetQuery    func(key string) string
	WHost        func() string
	WPath        func() string
	WRawQuery    func() string
	WRawURL      func() string
	WRequestURI  func() string
	WScheme      func() string
	WSetHost     func(host string)
	WSetPath     func(a0 string)
	WSetQuery    func(key string, value string)
	WSetRawQuery func(raw string)
	WSetScheme   func(scheme string)
}

func (W _github_com_eolinker_eosc_eocontext_http_context_IURIWriter) AddQuery(key string, value string) {
	W.WAddQuery(key, value)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IURIWriter) DelQuery(key string) {
	W.WDelQuery(key)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IURIWriter) GetQuery(key string) string {
	return W.WGetQuery(key)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IURIWriter) Host() string {
	return W.WHost()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IURIWriter) Path() string {
	return W.WPath()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IURIWriter) RawQuery() string {
	return W.WRawQuery()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IURIWriter) RawURL() string {
	return W.WRawURL()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IURIWriter) RequestURI() string {
	return W.WRequestURI()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IURIWriter) Scheme() string {
	return W.WScheme()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IURIWriter) SetHost(host string) {
	W.WSetHost(host)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IURIWriter) SetPath(a0 string) {
	W.WSetPath(a0)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IURIWriter) SetQuery(key string, value string) {
	W.WSetQuery(key, value)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IURIWriter) SetRawQuery(raw string) {
	W.WSetRawQuery(raw)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IURIWriter) SetScheme(scheme string) {
	W.WSetScheme(scheme)
}

// _github_com_eolinker_eosc_eocontext_http_context_IWebsocketContext is an interface wrapper for IWebsocketContext type
type _github_com_eolinker_eosc_eocontext_http_context_IWebsocketContext struct {
	IValue                  interface{}
	WAcceptTime             func() time.Time
	WAssert                 func(i interface{}) error
	WClone                  func() (eocontext.EoContext, error)
	WContext                func() context.Context
	WFastFinish             func()
	WGetBalance             func() eocontext.BalanceHandler
	WGetComplete            func() eocontext.CompleteHandler
	WGetEntry               func() eosc.IEntry
	WGetFinish              func() eocontext.FinishHandler
	WGetLabel               func(name string) string
	WGetUpstreamHostHandler func() eocontext.UpstreamHostHandler
	WIsCloneable            func() bool
	WIsWebsocket            func() bool
	WLabels                 func() map[string]string
	WLocalAddr              func() net.Addr
	WLocalIP                func() net.IP
	WLocalPort              func() int
	WProxies                func() []http_context.IProxy
	WProxy                  func() http_context.IRequest
	WRealIP                 func() string
	WRequest                func() http_context.IRequestReader
	WRequestId              func() string
	WResponse               func() http_context.IResponse
	WScheme                 func() string
	WSendTo                 func(scheme string, node eocontext.INode, timeout time.Duration) error
	WSetBalance             func(handler eocontext.BalanceHandler)
	WSetCompleteHandler     func(handler eocontext.CompleteHandler)
	WSetFinish              func(handler eocontext.FinishHandler)
	WSetLabel               func(name string, value string)
	WSetUpstreamConn        func(conn net.Conn)
	WSetUpstreamHostHandler func(handler eocontext.UpstreamHostHandler)
	WUpgrade                func() error
	WValue                  func(key interface{}) interface{}
	WWithValue              func(key interface{}, val interface{})
}

func (W _github_com_eolinker_eosc_eocontext_http_context_IWebsocketContext) AcceptTime() time.Time {
	return W.WAcceptTime()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IWebsocketContext) Assert(i interface{}) error {
	return W.WAssert(i)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IWebsocketContext) Clone() (eocontext.EoContext, error) {
	return W.WClone()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IWebsocketContext) Context() context.Context {
	return W.WContext()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IWebsocketContext) FastFinish() {
	W.WFastFinish()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IWebsocketContext) GetBalance() eocontext.BalanceHandler {
	return W.WGetBalance()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IWebsocketContext) GetComplete() eocontext.CompleteHandler {
	return W.WGetComplete()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IWebsocketContext) GetEntry() eosc.IEntry {
	return W.WGetEntry()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IWebsocketContext) GetFinish() eocontext.FinishHandler {
	return W.WGetFinish()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IWebsocketContext) GetLabel(name string) string {
	return W.WGetLabel(name)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IWebsocketContext) GetUpstreamHostHandler() eocontext.UpstreamHostHandler {
	return W.WGetUpstreamHostHandler()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IWebsocketContext) IsCloneable() bool {
	return W.WIsCloneable()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IWebsocketContext) IsWebsocket() bool {
	return W.WIsWebsocket()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IWebsocketContext) Labels() map[string]string {
	return W.WLabels()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IWebsocketContext) LocalAddr() net.Addr {
	return W.WLocalAddr()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IWebsocketContext) LocalIP() net.IP {
	return W.WLocalIP()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IWebsocketContext) LocalPort() int {
	return W.WLocalPort()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IWebsocketContext) Proxies() []http_context.IProxy {
	return W.WProxies()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IWebsocketContext) Proxy() http_context.IRequest {
	return W.WProxy()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IWebsocketContext) RealIP() string {
	return W.WRealIP()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IWebsocketContext) Request() http_context.IRequestReader {
	return W.WRequest()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IWebsocketContext) RequestId() string {
	return W.WRequestId()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IWebsocketContext) Response() http_context.IResponse {
	return W.WResponse()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IWebsocketContext) Scheme() string {
	return W.WScheme()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IWebsocketContext) SendTo(scheme string, node eocontext.INode, timeout time.Duration) error {
	return W.WSendTo(scheme, node, timeout)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IWebsocketContext) SetBalance(handler eocontext.BalanceHandler) {
	W.WSetBalance(handler)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IWebsocketContext) SetCompleteHandler(handler eocontext.CompleteHandler) {
	W.WSetCompleteHandler(handler)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IWebsocketContext) SetFinish(handler eocontext.FinishHandler) {
	W.WSetFinish(handler)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IWebsocketContext) SetLabel(name string, value string) {
	W.WSetLabel(name, value)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IWebsocketContext) SetUpstreamConn(conn net.Conn) {
	W.WSetUpstreamConn(conn)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IWebsocketContext) SetUpstreamHostHandler(handler eocontext.UpstreamHostHandler) {
	W.WSetUpstreamHostHandler(handler)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IWebsocketContext) Upgrade() error {
	return W.WUpgrade()
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IWebsocketContext) Value(key interface{}) interface{} {
	return W.WValue(key)
}
func (W _github_com_eolinker_eosc_eocontext_http_context_IWebsocketContext) WithValue(key interface{}, val interface{}) {
	W.WWithValue(key, val)
}

// _github_com_eolinker_eosc_eocontext_http_context_WebsocketFilter is an interface wrapper for WebsocketFilter type
type _github_com_eolinker_eosc_eocontext_http_context_WebsocketFilter struct {
	IValue             interface{}
	WDoWebsocketFilter func(ctx http_context.IWebsocketContext, next eocontext.IChain) error
}

func (W _github_com_eolinker_eosc_eocontext_http_context_WebsocketFilter) DoWebsocketFilter(ctx http_context.IWebsocketContext, next eocontext.IChain) error {
	return W.WDoWebsocketFilter(ctx, next)
}
